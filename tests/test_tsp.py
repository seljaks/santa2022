import pytest

from santa_2022.tsp import *


def test_generate_point_map():
    expected = [
        (0, 0),
        (0, -1),
        (0, -2),
        (-1, -2),
        (-2, -2),
        (-2, -1),
        (-1, -1),
        (-1, 0),
        (-2, 0),
        (-2, 1),
        (-2, 2),
        (-1, 2),
        (-1, 1),
        (0, 1),
        (0, 2),
        (1, 2),
        (2, 2),
        (2, 1),
        (1, 1),
        (1, 0),
        (2, 0),
        (2, -1),
        (2, -2),
        (1, -2),
        (1, -1),
        (0, -1),
        (0, 0),
    ]
    result = generate_point_map(2)
    assert expected == result


def test_points_from_configs():
    expected = [
        [(1, 0), (-1, 0)],
        [(1, 0), (-1, -1)],
        [(1, -1), (-1, -1)],
        [(0, -1), (-1, -1)],
        [(-1, -1), (-1, -1)],
        [(-1, -1), (-1, 0)],
        [(0, -1), (-1, 0)],
        [(0, -1), (-1, 1)],
        [(-1, -1), (-1, 1)],
        [(-1, 0), (-1, 1)],
        [(-1, 1), (-1, 1)],
        [(-1, 1), (0, 1)],
        [(-1, 0), (0, 1)],
        [(-1, 0), (1, 1)],
        [(-1, 1), (1, 1)],
        [(0, 1), (1, 1)],
        [(1, 1), (1, 1)],
        [(1, 1), (1, 0)],
        [(0, 1), (1, 0)],
        [(0, 1), (1, -1)],
        [(1, 1), (1, -1)],
        [(1, 0), (1, -1)],
        [(1, -1), (1, -1)],
        [(1, -1), (0, -1)],
        [(1, 0), (0, -1)],
        [(1, 0), (-1, -1)],
        [(1, 0), (-1, 0)],
    ]
    points = generate_point_map(2)
    assert points == [get_position(c) for c in expected]


def test_point_map_to_path():
    expected = [
        [(1, 0), (-1, 0)],
        [(1, 0), (-1, -1)],
        [(1, -1), (-1, -1)],
        [(0, -1), (-1, -1)],
        [(-1, -1), (-1, -1)],
        [(-1, -1), (-1, 0)],
        [(0, -1), (-1, 0)],
        [(0, -1), (-1, 1)],
        [(-1, -1), (-1, 1)],
        [(-1, 0), (-1, 1)],
        [(-1, 1), (-1, 1)],
        [(-1, 1), (0, 1)],
        [(-1, 0), (0, 1)],
        [(-1, 0), (1, 1)],
        [(-1, 1), (1, 1)],
        [(0, 1), (1, 1)],
        [(1, 1), (1, 1)],
        [(1, 1), (1, 0)],
        [(0, 1), (1, 0)],
        [(0, 1), (1, -1)],
        [(1, 1), (1, -1)],
        [(1, 0), (1, -1)],
        [(1, -1), (1, -1)],
        [(1, -1), (0, -1)],
        [(1, 0), (0, -1)],
        [(1, 0), (-1, -1)],
        [(1, 0), (-1, 0)],
    ]
    result = point_map_to_path(2)
    assert result == expected


@pytest.mark.parametrize(
    ('x', 'y', 'n', 'expected'),
    (
            (-2, -2, 2, [(-1, -1), (-1, -1)]),
            (-2, -1, 2, [(-1, -1), (-1, 0)]),
            (-2, 0, 2, [(-1, -1), (-1, 1)]),
            (-1, -2, 2, [(0, -1), (-1, -1)]),
            (-1, -1, 2, [(0, -1), (-1, 0)]),
            (-1, 0, 2, [(0, -1), (-1, 1)]),

            (-1, 0, 8,
             [(63, -64), (-32, 32), (-16, 16), (-8, 8), (-4, 4), (-2, 2), (-1, 1),
              (-1, 1)]),
            (-4, 0, 8,
             [(60, -64), (-32, 32), (-16, 16), (-8, 8), (-4, 4), (-2, 2), (-1, 1),
              (-1, 1)]),
            (-4, -4, 8,
             [(60, -64), (-32, 32), (-16, 16), (-8, 8), (-4, 4), (-2, 0), (-1, 0),
              (-1, 0)]),
    )
)
def test_bot_left_point_to_config(x, y, n, expected):
    result = bot_left_point_to_config(x, y, n=n)
    assert result == expected


@pytest.mark.parametrize(
    ('x', 'y', 'n', 'expected'),
    (
            (2, 2, 2, [(1, 1), (1, 1)]),
            (2, 1, 2, [(1, 1), (1, 0)]),
            (2, 0, 2, [(1, 1), (1, -1)]),
            (1, 2, 2, [(0, 1), (1, 1)]),
            (1, 1, 2, [(0, 1), (1, 0)]),
            (1, 0, 2, [(0, 1), (1, -1)]),

            (1, 0, 8,
             [(-63, 64), (32, -32), (16, -16), (8, -8), (4, -4), (2, -2), (1, -1),
              (1, -1)]),
            (4, 0, 8,
             [(-60, 64), (32, -32), (16, -16), (8, -8), (4, -4), (2, -2), (1, -1),
              (1, -1)]),
            (4, 4, 8,
             [(-60, 64), (32, -32), (16, -16), (8, -8), (4, -4), (2, 0), (1, 0),
              (1, 0)]),
            (4, 120, 8,
             [(-60, 64), (32, 32), (16, 16), (8, 8), (4, 0), (2, 0), (1, 0),
              (1, 0)]),
    )
)
def test_top_right_point_to_config(x, y, n, expected):
    result = top_right_point_to_config(x, y, n=n)
    assert result == expected


@pytest.mark.parametrize(
    ('x', 'y', 'n', 'expected'),
    (
            (-2, 2, 2, [(-1, 1), (-1, 1)]),
            (-1, 2, 2, [(-1, 1), (0, 1)]),
            (0, 2, 2, [(-1, 1), (1, 1)]),
            (-2, 1, 2, [(-1, 0), (-1, 1)]),
            (-1, 1, 2, [(-1, 0), (0, 1)]),
            (0, 1, 2, [(-1, 0), (1, 1)]),
            (0, 1, 8,
             [(-64, -63), (32, 32), (16, 16), (8, 8), (4, 4), (2, 2), (1, 1),
              (1, 1)]),
            (0, 2, 8,
             [(-64, -62), (32, 32), (16, 16), (8, 8), (4, 4), (2, 2), (1, 1),
              (1, 1)]),
            (-2, 2, 8,
             [(-64, -62), (32, 32), (16, 16), (8, 8), (4, 4), (2, 2), (0, 1),
              (0, 1)]),
    )
)
def test_top_left_point_to_config(x, y, n, expected):
    result = top_left_point_to_config(x, y, n=n)
    assert result == expected


@pytest.mark.parametrize(
    ('x', 'y', 'n', 'expected'),
    (
            (2, -2, 2, [(1, -1), (1, -1)]),
            (1, -2, 2, [(1, -1), (0, -1)]),
            (0, -2, 2, [(1, -1), (-1, -1)]),
            (2, -1, 2, [(1, 0), (1, -1)]),
            (1, -1, 2, [(1, 0), (0, -1)]),
            (0, -1, 2, [(1, 0), (-1, -1)]),

            (0, -1, 4, [(4, 3), (-2, -2), (-1, -1), (-1, -1)]),
            (2, -2, 4, [(4, 2), (-2, -2), (0, -1), (0, -1)]),

            (0, -1, 8,
             [(64, 63), (-32, -32), (-16, -16), (-8, -8), (-4, -4), (-2, -2), (-1, -1),
              (-1, -1)]),
            (0, -2, 8,
             [(64, 62), (-32, -32), (-16, -16), (-8, -8), (-4, -4), (-2, -2), (-1, -1),
              (-1, -1)]),
            (2, -2, 8,
             [(64, 62), (-32, -32), (-16, -16), (-8, -8), (-4, -4), (-2, -2), (0, -1),
              (0, -1)]),
    )
)
def test_bot_right_point_to_config(x, y, n, expected):
    result = bot_right_point_to_config(x, y, n=n)
    assert result == expected
